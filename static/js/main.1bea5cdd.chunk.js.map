{"version":3,"sources":["components/PrimaryAppBar/PrimaryAppBar.tsx","components/searchBar/SearchInput.tsx","components/searchBar/fetchRepos.ts","components/searchBar/SearchBar.tsx","components/searchBar/filterRepos.ts","components/ListOfRepos/SingleRepo.tsx","components/ListOfRepos/NoRepos.tsx","components/ListOfRepos/ListOfRepos.tsx","components/UserCard/fetchUser.ts","components/UserCard/UserCard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","grow","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","PrimaryAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","noWrap","root","padding","alignItems","width","input","marginLeft","flex","iconButton","divider","height","margin","CustomizedInputBase","prop","Paper","component","IconButton","aria-label","InputBase","placeholder","inputProps","onChange","event","setSearchString","target","value","fetchRepos","a","page","per_page","direction","sort","setfetching","apiURL","success","Axios","get","process","response","data","SearchBar","setrepos","setallRepos","useEffect","getAllReposOfUser","query","allRepositories","searchString","allRepos","length","filter","repo","name","includes","Box","justifyContent","Grid","item","xs","flexDirection","repos","SingleRepo","container","Link","href","html_url","gutterBottom","description","sm","language","stargazers_count","forks","color","Date","pushed_at","toLocaleString","Divider","NoRepos","ListOfRepos","repositories","fetching","style","CircularProgress","map","id","setFetching","setuser","console","log","UserCard","useState","user","fetchUser","justify","Avatar","alt","src","avatar_url","login","bio","following","followers","App","Container","md","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bea5cdd.chunk.js","sourcesContent":["import React from 'react';\r\nimport {makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    grow: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      display: 'none',\r\n      [theme.breakpoints.up('sm')]: {\r\n        display: 'block',\r\n      },\r\n    },\r\n  }),\r\n);\r\n\r\n/**\r\n * @return {<Box>} Top Appbar\r\n */\r\nexport default function PrimaryAppBar() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            Start Searching Github\r\n          </Typography>\r\n          <GitHubIcon className=\"m-1\"/>\r\n          \r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      padding: \"2px 4px\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      width: \"100%\",\r\n    },\r\n    input: {\r\n      marginLeft: theme.spacing(1),\r\n      flex: 1,\r\n    },\r\n    iconButton: {\r\n      padding: 10,\r\n    },\r\n    divider: {\r\n      height: 28,\r\n      margin: 4,\r\n    },\r\n  })\r\n);\r\n\r\ntype propType = {\r\n  setSearchString:Function;\r\n};\r\n\r\n// Input component of search bar\r\n/**\r\n * @param {Function}  setFetching - Function to change fetching state.\r\n * @param {Boolean} setSearchString - An optional param (Closure syntax)\r\n * @return {<Paper></Paper>} UI component\r\n */\r\nexport default function CustomizedInputBase(prop: propType) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Paper component=\"form\" className={classes.root}>\r\n      <IconButton className={classes.iconButton} aria-label=\"menu\">\r\n        <MenuIcon />\r\n      </IconButton>\r\n      <InputBase\r\n        className={classes.input}\r\n        placeholder=\"Search Github Repositories\"\r\n        inputProps={{ \"aria-label\": \"search github repositries\" }}\r\n        onChange={(event) => prop.setSearchString(event.target.value)}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n","import Axios from \"axios\";\r\n\r\ninterface IPost {\r\n  data: object;\r\n}\r\n// Function to fetch data repository data from github api\r\n/**\r\n * @param   {Number}  page - The page number \r\n * @param   {string} per_page - number of data per page\r\n * @param   {Boolean}  direction - desc | asc\r\n * @param   {Boolean}  sort - fullname | published | stars \r\n * @param   {Boolean}  setfetching - A Function to set fetching state true or false\r\n * @return {Object} Object of returned github api data\r\n */\r\nexport default async function fetchRepos(\r\n  page: number = 1,\r\n  per_page: number = 100,\r\n  direction: string = \"desc\",\r\n  sort = \"fullname\",\r\n  setfetching: Function\r\n) {\r\n  /**\r\n * @type {string} github v3 api url\r\n */\r\n  const apiURL:string = \"https://api.github.com/users\";\r\n\r\n  let success: boolean = true;\r\n  try {\r\n    setfetching(true)\r\n    const response = await Axios.get<IPost[]>(\r\n      `${apiURL}/${process.env.REACT_APP_GIRHUB_LOGIN}/repos?type=owner&&per_page=${per_page}&&page=${page}&&direction=${direction}&&sort=${sort}&&accept=application/vnd.github.v3+json`\r\n    );\r\n    setfetching(false)\r\n    return { success, data: response[\"data\"] };\r\n  } catch (error) {\r\n    setfetching(false)\r\n    return { success: false };\r\n  }\r\n}\r\n\r\n","import React, { useEffect } from \"react\";\r\nimport CustomizedInputBase from \"./SearchInput\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport fetchRepos from \"./fetchRepos\";\r\nimport filterRepos from \"./filterRepos\";\r\n\r\ntype PropType = {\r\n  setrepos: Function;\r\n  setSearchString: Function;\r\n  setfetching: Function;\r\n  page: number;\r\n  repos: any;\r\n  searchString: string;\r\n  setallRepos: Function;\r\n  allRepos: any;\r\n};\r\n\r\n// Parameters may be declared in a variety of syntactic forms\r\n/**\r\n * @param {Function}  setrepos - set repositories which will update ui aswell\r\n * @param {Function} setSearchString - filter string settting function\r\n * @param {Function} setfetching - function to change fetching status\r\n * @param {Page} page - Page number to fetch from github\r\n * @param {String} searchString - An optional param with a default value\r\n * @param {Function} setallRepos - main store, will be set only once\r\n * @param {Object} allRepos - set of all repos\r\n * @return {string} returns search bar UI component\r\n */\r\nexport default function SearchBar(prop: PropType) {\r\n  const per_page: number = 100;\r\n\r\n  useEffect(() => {\r\n    getAllReposOfUser();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // lets get all repos\r\n    prop.setrepos(filterRepos(prop.searchString, prop.allRepos));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [prop.searchString]);\r\n\r\n  // React component that displays the search bar.\r\n  /**\r\n   * @return {<Box></Box>} displays the search bar.\r\n   */\r\n  async function getAllReposOfUser() {\r\n    const response = await fetchRepos(\r\n      1,\r\n      per_page,\r\n      \"asc\",\r\n      \"full_name\",\r\n      prop.setfetching\r\n    );\r\n    if (!response.success) prop.setrepos([]);\r\n    if (response.success) {\r\n      prop.setrepos(response.data);\r\n      prop.setallRepos(response.data);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"flex-start\"\r\n        alignItems=\"center\"\r\n        className=\"bg-light p-1 mt-1\"\r\n      >\r\n        <Grid item xs={12}>\r\n          <CustomizedInputBase setSearchString={prop.setSearchString} />\r\n        </Grid>\r\n      </Box>\r\n      <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\r\n        <Typography variant=\"body2\">\r\n          Current Page: {prop.page}, showing{\" \"}\r\n          {prop.page * per_page - per_page + 1} to{\" \"}\r\n          {prop.repos.length > per_page\r\n            ? prop.repos.length\r\n            : prop.page * per_page}{\" \"}\r\n          of {prop.repos.length}\r\n        </Typography>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","// Function to filter catched repository data by name\r\n/**\r\n * @param {string}  query - query to filter the repos by.\r\n * @param {Array} allRepositories - Array of all the repositories to filter from.\r\n * @return {Array} returns filtered array.\r\n */\r\n\r\nexport default function filterRepos(query:string, allRepositories:any){\r\n    // if text is cleared, show all data again\r\n    if(query.length === 0){\r\n        return allRepositories;\r\n    }\r\n    return allRepositories.filter((repo:any)=>{\r\n        return repo.name.includes(query)\r\n    })\r\n}","import { Divider, Grid, Link, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport StarOutlineIcon from \"@material-ui/icons/StarOutline\";\r\nimport ComputerIcon from \"@material-ui/icons/Computer\";\r\n\r\n/**\r\n * @typedef {object} PropType Props\r\n * @param   {Array}  singleRepositoryObject - An object containing required information for the single repository object\r\n * @return {<Box>} JSX List of single repository\r\n */\r\nfunction SingleRepo(prop: any) {\r\n  return (\r\n    <>\r\n      <Grid container spacing={1} className=\"single-repo\">\r\n        <Grid item xs={12}>\r\n          <Typography className=\"repo-title\" variant=\"h5\" component=\"h2\">\r\n            <Link target=\"_blank\" href={prop.item.html_url}>\r\n              {prop.item.name}\r\n            </Link>\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Typography gutterBottom variant=\"body1\">\r\n            {prop.item.description}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container spacing={2}>\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            item\r\n            xs={6}\r\n            sm={3}\r\n          >\r\n            <ComputerIcon className=\"text-gold\" />\r\n            <span className=\"ml-1 mb-1\">{prop.item.language}</span>\r\n          </Grid>\r\n\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            item\r\n            xs={6}\r\n            sm={3}\r\n          >\r\n            <StarOutlineIcon className=\"text-gold\" />\r\n            <span className=\"ml-1 mb-1\">{prop.item.stargazers_count}</span>\r\n          </Grid>\r\n\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            item\r\n            xs={6}\r\n            sm={3}\r\n          >\r\n            <span>{prop.item.forks} forks</span>\r\n          </Grid>\r\n\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            item\r\n            xs={6}\r\n            sm={3}\r\n          >\r\n            <Typography color=\"textSecondary\" variant=\"body2\">\r\n              Published: {new Date(prop.item.pushed_at).toLocaleString(\"en-US\")}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Divider />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SingleRepo;\r\n","import { Box } from '@material-ui/core';\r\nimport React, { useEffect } from 'react'\r\n\r\n/**\r\n * @return {<p></p>} It renders when there is nothing to show for a user or the repositories are 0\r\n */\r\nfunction NoRepos(){\r\n    return(\r\n    <Box>\r\n        <p>Nothing to show rightnow. Please search for a different user instead.</p> \r\n    </Box>\r\n    )\r\n}\r\n\r\nexport default NoRepos;","import React from \"react\";\r\nimport { Box, CircularProgress } from \"@material-ui/core\";\r\nimport SingleRepo from \"./SingleRepo\";\r\nimport NoRepos from \"./NoRepos\";\r\n\r\ntype PropType = {\r\n  repos: any;\r\n  searchString: String;\r\n  fetching: boolean;\r\n};\r\n\r\n/**\r\n * @typedef {object} PropType Props\r\n * @param   {Array}  repos - Array of Repositories state.\r\n * @param   {string} searchString - The filter string\r\n * @param   {Boolean}  fetching - A boolean to indicate that repositories are being fetched\r\n * @return {<Box>} JSX List of all repositories\r\n */\r\nfunction ListOfRepos(prop: PropType) {\r\n  /**\r\n   * @type {string[]} JSX element to display the repos in DOM.\r\n   */\r\n  let repositories = [];\r\n  if (prop.fetching) {\r\n    return (\r\n      <Box\r\n        style={{ height: \"70vh\" }}\r\n        alignItems=\"center\"\r\n        display=\"flex\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n  if (prop.repos.length > 0) {\r\n    repositories = prop.repos.map((item: any) => {\r\n      return <SingleRepo key={item.id} item={item}></SingleRepo>;\r\n    });\r\n  }\r\n  return (\r\n    <Box>\r\n      <Box>\r\n        {prop.searchString && (\r\n          <p>\r\n            <strong>{prop.repos.length}</strong> results for repositories\r\n            matching <strong>{prop.searchString}</strong>\r\n          </p>\r\n        )}\r\n      </Box>\r\n      {repositories.length > 0 ? repositories : <NoRepos />}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default ListOfRepos;\r\n","import Axios from \"axios\";\r\n\r\n// Parameters may be declared in a variety of syntactic forms\r\n/**\r\n * @param {Function}  setFetching - Function to change fetching state.\r\n * @param {string=} setuser - Sets the returned user data from github api.\r\n * @return {string} return true | false depending on api result state\r\n */\r\nexport default async function fetchUser(setFetching:Function, setuser:Function) {\r\n  const apiURL =\r\n    `https://api.github.com/users/${process.env.REACT_APP_GIRHUB_LOGIN}`;\r\n  try {\r\n    setFetching(true)\r\n    const response = await Axios.get(apiURL);\r\n    console.log('response', response)\r\n    setuser(response.data)\r\n    return true;\r\n  } catch (error) {\r\n    setFetching(false)\r\n    return false;\r\n  }\r\n}\r\n","import { CircularProgress } from \"@material-ui/core\";\r\nimport { Avatar, Grid, Link, Typography } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport fetchUser from \"./fetchUser\";\r\n\r\ntype propType = {\r\n  setFetching: Function;\r\n  fetching: Boolean;\r\n};\r\n\r\n// Returns users card UI\r\n/**\r\n * @param {string}  setFetching\r\n * @param {string=} setFetching\r\n * @return {string} UI component of the user card.\r\n */\r\nexport default function UserCard(prop: propType) {\r\n  const [user, setuser]: any = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchUser(prop.setFetching, setuser);\r\n  }, []);\r\n\r\n  if (prop.fetching) {\r\n    <CircularProgress />;\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={3} justify=\"center\">\r\n      <Grid container item xs={12} justify=\"flex-start\">\r\n        <Avatar\r\n          alt={user.name}\r\n          src={user.avatar_url}\r\n          style={{ width: \"200px\", height: \"200px\" }}\r\n        />\r\n      </Grid>\r\n      <Grid container direction=\"column\" item xs={12}>\r\n        <Typography variant=\"body1\">\r\n          <Link target=\"_blank\" href={user.html_url}>\r\n            {user.name}\r\n          </Link>\r\n        </Typography>\r\n        <Typography variant=\"caption\">\r\n          <Link target=\"_blank\" href={user.html_url}>\r\n            {user.login}\r\n          </Link>\r\n        </Typography>\r\n      </Grid>\r\n      <Grid container xs={12} item>\r\n        <Typography variant=\"body1\">{user.bio}</Typography>\r\n      </Grid>\r\n\r\n      <Grid container xs={12} item alignItems=\"center\">\r\n        <Typography variant=\"body1\">{user.following} Following | </Typography>\r\n        <Typography className=\"ml-1\" variant=\"body1\">{ user.followers} Followers</Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\n\nimport { Box, Container, Grid } from \"@material-ui/core\";\nimport PrimaryAppBar from \"./components/PrimaryAppBar/PrimaryAppBar\";\nimport SearchBar from \"./components/searchBar/SearchBar\";\nimport ListOfRepos from \"./components/ListOfRepos/ListOfRepos\";\nimport UserCard from \"./components/UserCard/UserCard\";\n\n// Main app component which forms the whole layout\n/**\n * @return {<></>} Whole UI structure of the App.\n */\nfunction App() {\n  const [repos, setrepos] = useState([]);\n  const [searchString, setSearchString] = useState(\"\");\n  const [fetching, setfetching] = useState(false);\n  const [page, setpage] = useState(1);\n  const [allRepos, setallRepos] = useState([])\n\n  return (\n    <>\n      <PrimaryAppBar />\n      <Container>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={4}>\n            <UserCard setFetching={setfetching} fetching={fetching} />\n          </Grid>\n          <Grid item xs={12} md={8}>\n            <Box>\n              <SearchBar\n                setrepos={setrepos}\n                allRepos = {allRepos}\n                setallRepos={setallRepos}\n                setSearchString={setSearchString}\n                searchString={searchString}\n                setfetching={setfetching}\n                page={page}\n                repos={repos}\n              />\n              <ListOfRepos\n                repos={repos}\n                searchString={searchString}\n                fetching={fetching}\n              />\n            </Box>\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}